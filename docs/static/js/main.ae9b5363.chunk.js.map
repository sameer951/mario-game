{"version":3,"sources":["app/components/board-position.component.jsx","app/components/board.componet.jsx","App.tsx","serviceWorker.js","index.js"],"names":["BoardPosition","props","backImg","isMushroom","isMario","Fragment","className","id","onClick","onAddMushroom","throttling","isActive","fn","delay","setTimeout","BoardComponet","useState","marioPos","mushroomList","state","setState","willAdd","setWillAdd","count","setCount","downHandler","e","i","charAt","j","key","row","column","pos","filter","mushroom","value","useEffect","window","addEventListener","removeEventListener","Math","floor","length","c","alert","addMushroom","includes","console","log","rowList","columnList","idpos","push","App","handleChange","evt","target","name","type","placeholder","onChange","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae9b5363.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const BoardPosition = (props) => {\r\n\r\n    let backImg = props.isMushroom ? 'm' : props.isMario ? 'rio' : '';\r\n    return (<React.Fragment>\r\n        <span className={backImg + \" span-boxing\"} id={props.id} onClick={()=>props.onAddMushroom(props.id)}></span>\r\n    </React.Fragment>);\r\n    // {props.isMario?'M':''}{props.isMushroom?'C':''}\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { BoardPosition } from \"./board-position.component\";\r\n\r\nconst throttling = (() => {\r\n    var isActive = true;\r\n    return (fn, delay = 100) => {\r\n        if (isActive) {\r\n            fn();\r\n            setTimeout(() => { isActive = true; }, delay);\r\n            isActive = false;\r\n        }\r\n    }\r\n})();\r\nexport const BoardComponet = (props) => {\r\n\r\n    // \"61\", \"64\", \"66\", \"69\", \"72\", \"80\", \r\n    const msrList = [\"05\", \"10\", \"19\", \"21\", \"34\", \"42\", \"47\",\"85\", \"93\", \"98\"];\r\n    const [state, setState] = useState({ marioPos: '06', mushroomList: msrList });\r\n    const [willAdd, setWillAdd] = useState(false);\r\n    const [count, setCount] = useState(-1);\r\n\r\n    const downHandler = (e) => {\r\n        let i = state.marioPos.charAt(0),\r\n            j = state.marioPos.charAt(1);\r\n        if (e.key === 'ArrowDown' && props.row - 1 > i) { i++; }\r\n        else if (e.key === 'ArrowUp' && i > 0) { i--; }\r\n        else if (e.key === 'ArrowLeft' && j > 0) { j--; }\r\n        else if (e.key === 'ArrowRight' && props.column - 1 > j) { j++; }\r\n\r\n        let pos = '' + i + j;\r\n        if (state.marioPos != pos) {\r\n            throttling(() => {\r\n                let mushroomList = state.mushroomList.filter((mushroom) => mushroom != pos);\r\n                let value = { ...state, marioPos: pos, mushroomList };\r\n                setState(value);\r\n            }, 200);\r\n\r\n        } else if (e.key === 'e' || e.key === 'E') {\r\n            setWillAdd(true);\r\n        } else if (e.key === 'd' || e.key === 'D') {\r\n            setWillAdd(false);\r\n        }\r\n\r\n        // console.log(e);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", downHandler);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", downHandler);\r\n        };\r\n    });\r\n\r\n    //onMount\r\n    useEffect(() => {\r\n        let pos = '' + +(-1 + Math.floor(props.row / 2)) + +(-1 + Math.floor(props.column / 2));\r\n        let value = { ...state, marioPos: pos };\r\n        setState(value);\r\n        // alert(value)\r\n    }, [props.row,props.column]);\r\n    useEffect(() => {\r\n        if (!state.mushroomList.length) {\r\n            alert('You Finished All By Steps: ' + count);\r\n        } else {\r\n            setCount(c => c + 1);\r\n        }\r\n\r\n    }, [state])\r\n\r\n    const addMushroom = (id) => {\r\n        if (willAdd && !state.mushroomList.includes(id)) {\r\n            let mushroomList = [...state.mushroomList, id];\r\n            console.log(mushroomList);\r\n            let value = { ...state, mushroomList };\r\n            setState(value);\r\n        }\r\n    }\r\n\r\n    let rowList = [];\r\n    for (let i = 0; i < props.row; i++) {\r\n        let columnList = [];\r\n        for (let j = 0; j < props.column; j++) {\r\n            let idpos = '' + i + j;\r\n            columnList.push(<BoardPosition key={`${idpos}`} id={idpos} isMario={idpos + '' == state.marioPos}\r\n                isMushroom={state.mushroomList.includes(idpos)} onAddMushroom={addMushroom}></BoardPosition>);\r\n        }\r\n        rowList.push(<div className=\"box-row\" key={i + 'row'}>{columnList}</div>);\r\n    }\r\n    return (<React.Fragment>\r\n        {rowList}\r\n    </React.Fragment>);\r\n\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { BoardComponet } from \"./app/components/board.componet\";\r\n\r\nexport default function App() {\r\n\r\n  const [state, setState] = useState({ row: 10, column: 10 });\r\n\r\n  const handleChange = (evt) => {\r\n    const value = evt.target.value;\r\n    setState({ ...state, [evt.target.name]: value });\r\n  }\r\n  return (\r\n    <div className=\"App container-fluid\">\r\n      <div className=\"row\">\r\n        <input type=\"text\" className=\"form-control col-3 m-2\" name='row' value={state.row} placeholder=\"row\" onChange={handleChange} />\r\n        <input type=\"text\" className=\"form-control col-3 m-2\" name='column' value={state.column} placeholder=\"columns\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"mt-5\">\r\n        <BoardComponet row={state.row} column={state.column}></BoardComponet>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}