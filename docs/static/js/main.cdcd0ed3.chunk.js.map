{"version":3,"sources":["app/components/board-position.component.jsx","app/components/board.componet.jsx","App.tsx","serviceWorker.js","index.js"],"names":["BoardPosition","props","backImg","isMushroom","isMario","Fragment","className","id","onClick","onAddMushroom","throttling","isActive","fn","delay","setTimeout","getRandomArbitrary","min","max","Math","random","BoardComponet","useState","marioPos","mushroomList","state","setState","willAdd","setWillAdd","countNo","useRef","count","current","downHandler","e","i","charAt","j","key","row","column","pos","filter","mushroom","value","newGame","mList","shouldNo","parseInt","floor","newPos","includes","push","length","useEffect","window","addEventListener","removeEventListener","addMushroom","console","log","rowList","columnList","idpos","clickHandler","type","App","handleChange","evt","target","name","placeholder","onChange","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdcd0ed3.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const BoardPosition = (props) => {\r\n\r\n    let backImg = props.isMushroom ? 'm' : props.isMario ? 'rio' : '';\r\n    return (<React.Fragment>\r\n        <span className={backImg + \" span-boxing\"} id={props.id} onClick={()=>props.onAddMushroom(props.id)}></span>\r\n    </React.Fragment>);\r\n    // {props.isMario?'M':''}{props.isMushroom?'C':''}\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\"\r\nimport { BoardPosition } from \"./board-position.component\";\r\n\r\nconst throttling = (() => {\r\n    var isActive = true;\r\n    return (fn, delay = 100) => {\r\n        if (isActive) {\r\n            fn();\r\n            setTimeout(() => { isActive = true; }, delay);\r\n            isActive = false;\r\n        }\r\n    }\r\n})();\r\nfunction getRandomArbitrary(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\nexport const BoardComponet = (props) => {\r\n\r\n    // \"61\", \"64\", \"66\", \"69\", \"72\", \"80\", \r\n    const msrList = [\"05\", \"10\", \"19\", \"21\", \"34\", \"42\", \"47\", \"85\", \"93\", \"98\"];\r\n    const [state, setState] = useState({ marioPos: '06', mushroomList: msrList });\r\n    const [willAdd, setWillAdd] = useState(false);\r\n    // const [count, setCount] = useState(-1);\r\n    const countNo = useRef(0);\r\n    let count = countNo.current;\r\n    const downHandler = (e) => {\r\n        let i = state.marioPos.charAt(0),\r\n            j = state.marioPos.charAt(1);\r\n        if (e.key === 'ArrowDown' && props.row - 1 > i) { i++; }\r\n        else if (e.key === 'ArrowUp' && i > 0) { i--; }\r\n        else if (e.key === 'ArrowLeft' && j > 0) { j--; }\r\n        else if (e.key === 'ArrowRight' && props.column - 1 > j) { j++; }\r\n\r\n        let pos = '' + i + j;\r\n        if (state.marioPos != pos) {\r\n            throttling(() => {\r\n                let mushroomList = state.mushroomList.filter((mushroom) => mushroom != pos);\r\n                let value = { ...state, marioPos: pos, mushroomList };\r\n                setState(value);\r\n            }, 50);\r\n\r\n        } else if (e.key === 'e' || e.key === 'E') {\r\n            setWillAdd(true);\r\n        } else if (e.key === 'd' || e.key === 'D') {\r\n            setWillAdd(false);\r\n        }\r\n\r\n        // console.log(e);\r\n    }\r\n    const newGame = () => {\r\n        setTimeout(() => {\r\n            let mList = [];\r\n            let shouldNo = (parseInt(props.row) + parseInt(props.column)) / 2;\r\n            let pos = '' + +(-1 + Math.floor(props.row / 2)) + +(-1 + Math.floor(props.column / 2));\r\n            do {\r\n                let newR = parseInt(getRandomArbitrary(0, props.row));\r\n                let newC = parseInt(getRandomArbitrary(0, props.column));\r\n                let newPos = '' + newR + newC;\r\n                if (!mList.includes(newPos) && pos != newPos) {\r\n                    mList.push(newPos);\r\n                    // console.log(mList);\r\n                    if (mList.length == shouldNo) {\r\n                        countNo.current = 1;\r\n                        setState({ ...state, marioPos: pos, mushroomList: mList });\r\n                    };\r\n                }\r\n            } while (mList.length < shouldNo);\r\n        }, 0)\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\", downHandler);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", downHandler);\r\n        };\r\n    });\r\n\r\n    //onMount\r\n    useEffect(() => {\r\n        newGame();\r\n    }, [props.row, props.column]);\r\n    useEffect(() => {\r\n        if (!state.mushroomList.length) {\r\n            // alert('You Finished All By Steps: ' + countNo.current - 1);\r\n        } else {\r\n            countNo.current = count + 1;\r\n            // setCount(c => c + 1);\r\n        }\r\n\r\n    }, [state.marioPos])\r\n\r\n    const addMushroom = (id) => {\r\n        if (willAdd && !state.mushroomList.includes(id)) {\r\n            let mushroomList = [...state.mushroomList, id];\r\n            console.log(mushroomList);\r\n            let value = { ...state, mushroomList };\r\n            setState(value);\r\n        }\r\n    }\r\n\r\n    let rowList = [];\r\n    for (let i = 0; i < props.row; i++) {\r\n        let columnList = [];\r\n        for (let j = 0; j < props.column; j++) {\r\n            let idpos = '' + i + j;\r\n            columnList.push(<BoardPosition key={`${idpos}`} id={idpos} isMario={idpos + '' == state.marioPos}\r\n                isMushroom={state.mushroomList.includes(idpos)} onAddMushroom={addMushroom}></BoardPosition>);\r\n        }\r\n        rowList.push(<div className=\"box-row\" key={i + 'row'}>{columnList}</div>);\r\n    }\r\n    const clickHandler = (type) => {\r\n        let e = { key: type }\r\n        downHandler(e);\r\n    }\r\n    return (<React.Fragment>\r\n        {rowList}\r\n        <div >\r\n            {/* !state.mushroomList.length && count ? count : */}\r\n            <div className=\"float-right\">Steps Moved=&gt; {count ? count - 1 : 0}</div>\r\n            &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<div className=\"btn btn-primary\" onClick={() => clickHandler('ArrowUp')}><i className=\"arrow up\"></i></div><br /><br />\r\n            <div className=\"float-right p-2\">{!state.mushroomList.length ? `Game Over With ${count - 1} steps` : ''}</div>\r\n            <div className=\"float-right btn btn-danger\" onClick={() => newGame()}>Start New Game</div>\r\n            <div className=\"btn btn-primary\" onClick={() => clickHandler('ArrowLeft')}><i className=\"arrow left\"></i></div> &nbsp;&nbsp;\r\n            <div className=\"btn btn-primary\" onClick={() => clickHandler('ArrowRight')}><i className=\"arrow right\"></i></div><br /><br />\r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<div className=\"btn btn-primary\" onClick={() => clickHandler('ArrowDown')}><i className=\"arrow down\"></i></div> <br />\r\n        </div>\r\n    </React.Fragment>);\r\n\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { BoardComponet } from \"./app/components/board.componet\";\r\n\r\nexport default function App() {\r\n\r\n  const [state, setState] = useState({ row: 10, column: 10 });\r\n\r\n  const handleChange = (evt) => {\r\n    const value = evt.target.value;\r\n    setState({ ...state, [evt.target.name]: value });\r\n  }\r\n  return (\r\n    <div className=\"App container-fluid\">\r\n      <div className=\"row\">\r\n        <input type=\"text\" className=\"form-control col-3 m-2\" name='row' value={state.row} placeholder=\"row\" onChange={handleChange} />\r\n        <input type=\"text\" className=\"form-control col-3 m-2\" name='column' value={state.column} placeholder=\"columns\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"mt-5\">\r\n        <BoardComponet row={state.row} column={state.column}></BoardComponet>\r\n      </div>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}